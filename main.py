import telebot
from telebot import types
from functions_for_json import *

token = '6821919054:AAGcj-d94HKSl8REdyJzRI-ahCmTDJDol-8'
bot = telebot.TeleBot(token)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    call_funk = callback.data
    message = callback.message

    match call_funk:
        case 'sign_in':
            sign_in(message)
        case 'all_drivers':
            get_all_drivers(message)
        case 'car':
            get_all_cars(message)
        case 'add_driver':
            add_drivers(message)
        case 'delete_driver':
            delete_driver(message)


@bot.message_handler(commands=['start'])
def start_message(message):

    chat_id = message.chat.id

    deleter(message)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data='sign_in'))
    bot.send_message(chat_id, 'üîê <b>–í–æ–π—Ç–∏</b> –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è <u>—Å—Ç–∞—Ä—Ç–∞</u>.', reply_markup=markup, parse_mode='html')


    # deleter(message)
    # bot.send_message(message.chat.id,
    #                  "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –≤–∏–¥–µ - '+79999999999' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    # bot.register_next_step_handler(message, is_registered)


@bot.message_handler(commands=['sign_out'])
def out_message(message):
    chat_id = message.chat.id

    deleter(message)

    if is_sign_in(chat_id):
        del_user_log(chat_id)
        bot.send_message(chat_id, "üö™ <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n", parse_mode='html')


def sign_in(message):
    chat_id = message.chat.id

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if not is_sign_in(chat_id):
        bot.send_message(chat_id, "üíº <b>–í–≤–µ–¥–∏—Ç–µ</b> –ª–æ–≥–∏–Ω –∫–æ–º–ø–∞–Ω–∏–∏.", parse_mode='html')
        bot.register_next_step_handler(message, is_registered)
    else:
        login = get_login(message.chat.id)
        id_owner = get_id_user_login(login)
        global owner
        # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ–π –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        owner = Owner(id_owner, get_by_id(id_owner, "Full name"), get_by_id(id_owner, "Company"))
        help_message(message)


def is_registered(message):
    chat_id = message.chat.id
    registered_drivers = registered_users_login('–í–ª–∞–¥–µ–ª–µ—Ü')

    login = str(message.text)

    if login in registered_drivers:
        id_owner = get_id_user_login(message.text)
        global owner
        # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ–π –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        owner = Owner(id_owner, get_by_id(id_owner, "Full name"), get_by_id(id_owner, "Company"))
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        bot.register_next_step_handler(message, pass_login_drivers, login=login)
    else:
        bot.send_message(chat_id, "–í–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        start_message(message)


def pass_login_drivers(message, login):
    password_drivers = registered_users_password("–í–ª–∞–¥–µ–ª–µ—Ü")
    if str(message.text) in password_drivers:
        bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
        add_user_log(message.chat.id, login)
        help_message(message)
    
        # bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–≤–µ–¥–∏—Ç–µ /help")


@bot.message_handler(commands=['main_menu'])
def help_message(message):
    deleter(message)

    if is_sign_in(message.chat.id):
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('‚öôÔ∏è –í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏', callback_data='all_drivers')
        btn2 = types.InlineKeyboardButton('üè¢ –í—Å–µ –º–∞—à–∏–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏', callback_data='car')
        markup.row(btn1, btn2)
        btn3 = types.InlineKeyboardButton('üöò –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è', callback_data='add_driver')
        btn4 = types.InlineKeyboardButton('üöó –£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è', callback_data='delete_driver')
        markup.row(btn3, btn4)

        bot.send_message(message.chat.id, "–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏ - /all_drivers\n"
                                        "–í—Å–µ –º–∞—à–∏–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏ - /car\n"
                                        "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è - /add_driver\n"
                                        "–£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è - /delete_driver", reply_markup=markup)
    else:
        start_message(message)


# –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
@bot.message_handler(commands=['all_drivers'])
def get_all_drivers(message):
    deleter(message)
    res = ""
    for i in get_inf_users(owner.company, "–í–æ–¥–∏—Ç–µ–ª—å"):
        res += "–§–ò–û = " + i[1] + " –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è = " + i[2] + "\n"
    bot.send_message(message.chat.id, res)
    help_message(message)


# –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—à–∏–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
@bot.message_handler(commands=['car'])
def get_all_cars(message):
    deleter(message)
    car_id = get_car(owner.company, "Company")
    res = ""
    for i in get_inf_car(car_id):
        res += "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä = " + str(i[1]) + " –ú–∞—Ä–∫–∞ = " + str(i[2]) + "\n"
    bot.send_message(message.chat.id, res)
    help_message(message)


@bot.message_handler(commands=['add_driver'])
def add_drivers(message):
    deleter(message)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä—Ç–µ: "
                                      "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–∞—Ä–æ–ª—å, –∏–º—è, –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)")
    bot.register_next_step_handler(message, add_drivers_json)


@bot.message_handler(commands=['delete_driver'])
def delete_driver(message):
    deleter(message)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
    bot.register_next_step_handler(message, delete_driver_json)


def delete_driver_json(message):
    try:                                                                                                                                                                                                                                
        id_driver = get_id_driver_phone(message.text)
        delete_by_id(id_driver)
    except Exception:
        bot.send_message(message.chat.id, f'–î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è: {message.text} - –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–µ.')
        help_message(message)


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—é –∏–Ω—Ñ—É –≤ —Å–ª–æ–≤–∞—Ä—å)
def add_drivers_json(message):
    id_ = get_id_df()
    try:
        login, password, name, birthday = message.text.split(", ")
        driver_ = {"ID_user": id_, "Type": "–í–æ–¥–∏—Ç–µ–ª—å", "Login": login, "Password": password,
                "Full name": name, "Company": owner.company, "Birthday": birthday}
        add_row_json(driver_)
        bot.send_message(message.chat.id, "–í–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
    except Exception:
        bot.send_message(message.chat.id, f'–î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è: {message.text} - –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–µ.')



# –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã –æ–ø—Ä–µ–¥.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∏–ø –æ—Ç—á–µ—Ç), –Ω–æ –æ–Ω–æ –ø–æ–∫–∞ –Ω–∏–≥–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è
def get_defects(message):
    mes_ = ""
    report_ = get_defects_driver_car(str(message.text), 'driver_id')
    for i in report_:
        mes_ += "–¢–∏–ø –ø–æ–ª–æ–º–∫–∏: " + i[0]
        mes_ += "\n–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–æ–º–∫–∏: " + i[1] + "\n"
    bot.send_message(message.chat.id, mes_)


@bot.message_handler(func=lambda message: message)
def deleter(message):
    chat_id = message.chat.id
    deleter_message(chat_id, message, 10)


def deleter_message(chat_id, message, count_del=1):
    message_id = message.id
    if count_del < 0:
        del_list = range(0, count_del, -1)
    else:
        del_list = range(count_del)

    for i in del_list:
        try:
            bot.delete_message(chat_id, message_id-i)
        except Exception:
            continue


class Owner:
    def __init__(self, id_, name, company):
        self.id_ = id_
        self.name = name
        self.company = company


bot.infinity_polling()
